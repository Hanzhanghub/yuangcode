# coding:utf-8

'''
date: 2017/11/14
content: 
给出一个含有正整数和负整数的数组，重新排列成一个正负数交错的数组。

注意事项
不需要保持正整数或者负整数原来的顺序。

样例
给出数组[-1, -2, -3, 4, 5, 6]，重新排序之后，变成[-1, 5, -2, 4, -3, 6]或者其他任何满足要求的答案
'''
class Solution:
    """
    @param: A: An integer array.
    @return: nothing
    """
    def rerange(self, A):
        # special condition
        if not A:
            return

        ap = [i for i in A if i > 0]
        an = [i for i in A if i < 0]

        if len(ap) > len(an):
            tmp = self.helper(ap, an)
        else:
            tmp = self.helper(an, ap)

        for i in range(len(tmp)):
            A[i] = tmp[i]

    def helper(self, a, b):
        tmp = []

        for i in range(len(b)):
            tmp.append(a[i])
            tmp.append(b[i])

        if len(a) > len(b):
            tmp.append(a[-1])
        return tmp





    #     # special condition
    #     if not A:
    #         return
    #
    #
    #     length = len(A)
    #
    #     if length % 2 == 0:
    #         self.partition(A, False)
    #     else:
    #         self.partition(A, True)
    #     return A
    #
    # def partition(self, A, flag):
    #     lunar = 0
    #     sun = lunar + 1
    #     while lunar < len(A) and sun < len(A):
    #         if A[lunar] * A[sun] < 0:
    #             lunar += 1
    #             sun = lunar + 1
    #
    #         else:
    #             while sun < len(A) and A[sun] * A[lunar] > 0:
    #                 sun += 1
    #
    #             if sun < len(A):
    #                 tmp = A[sun]
    #                 A[sun] = A[lunar+1]
    #                 A[lunar+1] = tmp
    #                 lunar += 2
    #                 sun = lunar + 1
    #     if flag:
    #         rear = A.pop()
    #         A.insert(0, rear)

        return A

if __name__ == '__main__':
    a = [-19,35,3,-2,4,27,5,-2,-30,-35,10,17,18,15,16,-14,-16,-25,28,16,-3,3,-37,12,-7,-25,22,-1,-28,-20,28,37,-15,12,-36,24,11,6,9,-24,-15,-7,6,21,32,12,20,-9,31,-9,22,4,36,13,6,-7,33,18,10,32,-15,13,-37,-31,29,22,-17,-32,-10,-23,30,-24,23,30,10,26,-24,-9,8,-37,13,14,20,-29,-34,-30,17,-1,14,-1,-19,20,19,-29,-14,18,-25,-27,-23,37,-30,20,37,19,-35,3,25,-1,-12,-21,-4,35,-17,5,35,-1,19,-35,26,-19,10,19,14,32,-34,-26,7,-35,-34,25,-26,20,-25,37,-9,33,-14,-26,-31,-16,20,-14,17,27,-26,30,-30,-1,15,-24,-22,1,-23,18,13,-32,23,1,5,-35,-22,30,-3,-18,-13,34,-20,32,19,26,9,-22,-19,26,18,8,-6,4,5,9,13,-34,13,2,2,10,35,-17,-17,-36,-19,20,29,5,18,-20,-20,-7,25,-28,-10,-24,-18,22,29,-7,19,10,12,-33,-30,3,-37,-3,-3,-23,-31,7,-37,11,34,-37,34,2,13,32,3,-33,-19,-25,-36,-6,21,-18,-37,-8,-11,14,8,19,36,37,-13,9,-32,-16,17,-23,-37,-8,-31,-33,18,-35,8,-12,-32,-5,-16,5,26,-11,28,-16,-16,-13,13,7,-12,35,12,6,10,26,12,33,32,9,-30,-9,-16,-26,-34,-22,8,-37,7,10,4,-17,-25,22,-4,27,-27,17,-12,-27,-21,3,26,-6,-11,-31,10,10,11,32,4,-37,-37,-29,28,9,27,-21,-1,29,-6,2,3,14,-8,-24,24,-2,-19,23,5,-7,-11,29,27,-16,-15,-13,-12,34,-32,-21,36,21,-4,-4,-11,-4,5,32,15,-31,6,7,-8,36,31,-2,-27,-31,-21,-29,36,17,-6,-15,11,28,-13,-11,27,3,2,-6,20,-9,-35,8,26,-26,26,15,-5,3,-21,20,28,25,-27,18,35,33,24,-21,28,-27,32,-7,-18,-24,-6,-29,8,3,-26,-3,-18,-3,30,-7,-18,34,-11,10,-32,6,30,21,-7,24,30,-34,-18,-29,27,3,-11,-7,-36,-10,-12,-36,-36,-3,15,31,-19,-37,-13,-15,10,32,-22,-13,-29,-12,27,-6,-8,-2,18,12,8,-14,-15,10,-15,-37,-9,7,34,15,34,12,-8,28,-3,-10,34,23,25,-15,-11,-15,3,15,-16,-15,-4,-29,-27,-31,27,-24,-25,-31,-31,18,-3,-5,20,9,28,6,37,-30,35,29,-26,2,20,24,-27,26,3,5,16,23,35,-6,35,-33,-14,33,11,-22,33,-18,7,-15,-35,34,-1,-25,-9,-33,36,2,-25,33,-35,23,33,21,-5,6,20,19,10,3,-35,-25,-10,28,20,-28,35,-17,5,-13,-7,-21,2,20,-20,-6,28,19,-36,32,25,20,34,-5,-20,37,29,-24,11,-7,3,-1,-1,13,-18,35,26,-9,36,-2,-32,20,-30,1,9,-17,-32,-37,2,-15,9,10,26,-9,2,-21,33,-18,-1,-3,16,-28,-16,6,-7]
    # print(len(a))
    # neg = 0
    # pos = 0
    # for i in range(len(a)):
    #     if a[i] > 0 :
    #         pos += 1
    #     else:
    #         neg += 1
    # print(neg, pos)
    s = Solution()
    ret = s.rerange(a)
    print(ret)
    # print(ret[::2])
    # print(ret[1::2])
    # for i, num in enumerate(ret[::2]):
    #     if num < 0:
    #         continue
    #     else:
    #         print(i, num)
    #         break

'''
1.这道题的关键是要先判断A中正数和负数的个数，谁多，谁就打头
2.实现方法有很多，我的第一种方法考虑的不够周全
'''











